// Loyalty.js
import React, { useState, useEffect, useRef } from 'react';
import { useParams } from 'react-router-dom';
import {
    Box,
    Typography,
    Button,
    Grid,
} from '@mui/material';
import PromocodeItem from './PromocodeItem';
import PrizeItem from './PrizeItem';
import PromocodeModal from './PromocodeModal';
import EmptyState from "../EmptyState";

const Loyalty = () => {
    const [activePromocodes, setActivePromocodes] = useState([]);
    const [inactivePromocodes, setInactivePromocodes] = useState([]);
    const activePromocodesRef = useRef(null);
    const inactivePromocodesRef = useRef(null);
    const { organizerId } = useParams();
    const [promocodeModalOpen, setPromocodeModalOpen] = useState(false);

    const fetchPromocodes = async (isActive) => {
        try {
            const token = localStorage.getItem("token");
            const url = `http://localhost:8711/api/v1/loyalty/promocode/getAll/${organizerId}${
                !isActive ? '?onlyOff=true' : ''
            }`;
            const response = await fetch(url, {
                headers: { Authorization: `Bearer ${token}` },
            });
            if (response.ok) {
                const data = await response.json();
                isActive
                    ? setActivePromocodes(data.filter(p => p.isActive))
                    : setInactivePromocodes(data.filter(p => !p.isActive));
            }
        } catch (error) {
            console.error(`Ошибка загрузки промокодов:`, error);
        }
    };

    useEffect(() => {
        fetchPromocodes(true);
        fetchPromocodes(false);
    }, [organizerId]);

    const handleDeactivatePromocode = async (promoValue) => {
        try {
            const token = localStorage.getItem("token");
            const response = await fetch(`http://localhost:8711/api/v1/loyalty/promocode/off/${promoValue}`, {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
            });
            if (!response.ok) {
                throw new Error('Ошибка деактивации промокода');
            }
            const deactivatedPromo = await response.json();
            setActivePromocodes((prevActive) =>
                prevActive.filter((promo) => promo.value !== promoValue)
            );
            setInactivePromocodes((prevInactive) => [...prevInactive, deactivatedPromo]);
        } catch (error) {
            console.error("Ошибка:", error);
            alert("Не удалось деактивировать промокод. Попробуйте позже.");
        }
    };

    const scrollContainerStyle = {
        display: 'flex',
        overflowX: 'auto',
        gap: 2,
        py: 2,
        px: 2,
        mx: -2,
        width: 'calc(100% + 32px)',
        scrollBehavior: 'smooth',
        '&::-webkit-scrollbar': {
            height: '6px',
        },
        '&::-webkit-scrollbar-track': {
            background: '#f1f1f1',
            borderRadius: '3px',
        },
        '&::-webkit-scrollbar-thumb': {
            background: '#888',
            borderRadius: '3px',
            '&:hover': {
                background: '#555',
            }
        },
        scrollbarWidth: 'thin',
        scrollbarColor: '#888 #f1f1f1',
    };

    return (
        <Box sx={{ maxWidth: 800, margin: "auto", mt: 4 }}>
            <Typography variant="h4" align="center" gutterBottom>
                Система лояльности
            </Typography>
            <Box sx={{ display: "flex", justifyContent: "space-between", mb: 3 }}>
                <Button
                    variant="contained"
                    color="primary"
                    onClick={() => setPromocodeModalOpen(true)}
                >
                    Создать промокод
                </Button>
                <Button
                    variant="contained"
                    color="secondary"
                    onClick={() => {}}
                >
                    Создать приз
                </Button>
            </Box>
            <Typography variant="h5" gutterBottom sx={{ mt: 4 }}>
                Активные промокоды
            </Typography>
            <Box ref={activePromocodesRef} sx={scrollContainerStyle}>
                {activePromocodes.length > 0 ? (
                    activePromocodes.map((promocode) => (
                        <PromocodeItem
                            key={promocode.id}
                            promocode={promocode}
                            onDeactivate={handleDeactivatePromocode}
                        />
                    ))
                ) : (
                    <EmptyState message="Активных промокодов пока нет" />
                )}
            </Box>
            <Typography variant="h5" gutterBottom sx={{ mt: 4 }}>
                Неактивные промокоды
            </Typography>
            <Box ref={inactivePromocodesRef} sx={scrollContainerStyle}>
                {inactivePromocodes.length > 0 ? (
                    inactivePromocodes.map((promocode) => (
                        <PromocodeItem
                            key={promocode.id}
                            promocode={promocode}
                            onDeactivate={null}
                        />
                    ))
                ) : (
                    <EmptyState message="Неактивных промокодов пока нет" />
                )}
            </Box>
            <PromocodeModal
                open={promocodeModalOpen}
                onClose={() => setPromocodeModalOpen(false)}
                onCreate={(newCode) => {
                    setActivePromocodes(prev => [...prev, newCode]);
                }}
                organizerId={organizerId}
            />
        </Box>
    );
};

export default Loyalty;

// PrizeItem.js
import React, { useState } from 'react';
import {
    Paper,
    Typography,
    Button,
    IconButton,
    CircularProgress
} from '@mui/material';
import AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';
import CloseIcon from '@mui/icons-material/Close';

const PrizeItem = ({ prize, onToggle, onImageUpload }) => {
    const [imageLoading, setImageLoading] = useState(false);

    const handleImageChange = async (event) => {
        const file = event.target.files[0];
        if (file) {
            setImageLoading(true);
            try {
                await onImageUpload(prize.id, file);
            } catch (error) {
                alert('Ошибка загрузки изображения');
            }
            setImageLoading(false);
        }
    };

    return (
        <Paper elevation={3} sx={{ p: 2, textAlign: "center", position: 'relative' }}>
            <IconButton
                sx={{
                    position: 'absolute',
                    top: 4,
                    right: 4,
                    '&:hover': { color: 'error.main' }
                }}
                onClick={() => onToggle(prize.id)}
            >
                <CloseIcon fontSize="small" />
            </IconButton>

            <Box sx={{ position: "relative", mb: 2 }}>
                {imageLoading ? (
                    <CircularProgress sx={{ height: 150, width: 150 }} />
                ) : (
                    <img
                        src={prize.imageUrl || "https://via.placeholder.com/150"}
                        alt="Приз"
                        style={{
                            width: "100%",
                            height: 150,
                            objectFit: "cover",
                            borderRadius: "8px",
                        }}
                    />
                )}
                <IconButton
                    sx={{
                        position: "absolute",
                        bottom: 8,
                        right: 8,
                        backgroundColor: "rgba(0, 0, 0, 0.6)",
                        color: "#fff",
                        "&:hover": { backgroundColor: "rgba(0, 0, 0, 0.8)" },
                    }}
                    component="label"
                >
                    <input
                        type="file"
                        hidden
                        onChange={handleImageChange}
                        accept="image/*"
                    />
                    <AddPhotoAlternateIcon />
                </IconButton>
            </Box>
            <Typography variant="body1">{prize.bonusCost} баллов</Typography>
            <Typography variant="body2">Осталось: {prize.amount} шт.</Typography>
            <Button
                variant="outlined"
                color={prize.needToShow ? "error" : "success"}
                sx={{ mt: 1 }}
                onClick={() => onToggle(prize.id)}
            >
                {prize.needToShow ? "Отключить" : "Включить"}
            </Button>
        </Paper>
    );
};

export default PrizeItem;

PrizeModal.js
import React, { useState } from 'react';
import {
    Dialog,
    DialogTitle,
    DialogContent,
    TextField,
    DialogActions,
    Button
} from '@mui/material';

const CreatePrizeModal = ({ open, onClose, onCreate, organizerId }) => {
    const [form, setForm] = useState({
        bonusCost: 100,
        amount: 1,
    });

    const handleCreate = async () => {
        try {
            const newPrize = {
                ownerUUID: organizerId,
                ...form,
                needToShow: true,
            };
            await onCreate(newPrize);
            onClose();
        } catch (error) {
            alert('Ошибка создания приза');
        }
    };

    return (
        <Dialog open={open} onClose={onClose}>
            <DialogTitle>Создание приза</DialogTitle>
            <DialogContent>
                <TextField
                    fullWidth
                    margin="dense"
                    label="Стоимость в баллах"
                    type="number"
                    value={form.bonusCost}
                    onChange={(e) => setForm({...form, bonusCost: e.target.value})}
                />
                <TextField
                    fullWidth
                    margin="dense"
                    label="Количество"
                    type="number"
                    value={form.amount}
                    onChange={(e) => setForm({...form, amount: e.target.value})}
                />
            </DialogContent>
            <DialogActions>
                <Button onClick={handleCreate} variant="contained" color="primary">
                    Создать
                </Button>
                <Button onClick={onClose} color="secondary">
                    Отмена
                </Button>
            </DialogActions>
        </Dialog>
    );
};

export default CreatePrizeModal;

